<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
           
    <!-- 同样支持注解配置 -->
    <context:annotation-config/>
    
    <!-- 两种方式启动对@AspectJ的支持
    <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" />-->
    <aop:aspectj-autoproxy />
    
    <!-- 自动扫描指定包及其子包的所有bean类 -->
    <context:component-scan base-package="com.spring.test">
    	<context:exclude-filter type="regex" expression="ImportToPJTE"/>
    </context:component-scan>
    
    <!--PropertyPlaceholderConfigurer是一个bean 后处理器，它会读取属性文件信息，并将这些信息设置成spring配置文件的元数据  -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    	<property name="locations">
    		<list>
    			<!-- <value>/WEB-INF/my.properties</value>java类创建时不能读取成功 -->
    			<value>classpath:my.properties</value>
    		</list>
    	</property>
    </bean>
    <!-- PropertyOverrideConfigurer是一个bean 后处理器，它会读取属性文件信息，并会用这些信息设置覆盖spring的元数据 -->
    <bean class="org.springframework.beans.factory.config.PropertyOverrideConfigurer">
    		<property name="locations">
    		<list>
    			<value>classpath:info.properties</value><!-- 不可以直接写成 info.properties -->
    		</list>
    	</property>
    </bean>
    
     
     
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
	    <property name="url" value="${jdbc.url}"/>
	    <property name="username" value="${jdbc.username}"/>
	    <property name="password" value="${jdbc.password}"/>
	     <!-- 连接池启动时的初始值 
		 <property name="initialPoolSize" value="1"/>
		 -->
		 <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 
		 <property name="maxPoolSize" value="10"/>-->
		 <!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请
		 <property name="minPoolSize" value="1"/> -->
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
	     <property name="dataSource" ref="dataSource"/>
	     <property name="mappingResources">
		    <list>
		      <value>com/domain/Person.hbm.xml</value>
		      <value>com/domain/Employee.hbm.xml</value>
		      <value>com/domain/Company.hbm.xml</value>
		      <value>com/domain/Home.hbm.xml</value>
		    </list>
	     </property>
	     <property name="hibernateProperties">
		    <value>
		        hibernate.dialect=org.hibernate.dialect.MySQLDialect
		        hibernate.hbm2ddl.auto=update
		        hibernate.show_sql=true
		        hibernate.format_sql=false       
		      </value>
	    </property>
	</bean>
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
	  	<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<bean id="personService" class="com.service.impl.PersonServiceImpl"/>
	<bean id="personDao" class="com.dao.impl.PersonDaoImpl"></bean>
	<bean id="personAction" class="com.action.PersonAction"/>
	<bean id="default" class="com.action.Default"></bean>
	<bean id="myInterceptor" class="com.interceptor.MyInterceptor"></bean>
	<bean id="myMethodInterceptor" class="com.interceptor.MyMethodInterceptor"></bean>
	<!-- applicationListener  -->
	<bean class="com.spring.listener.EventNotifier" />
	<!-- getApplicationContext -->
	<bean id="springContext" class="com.spring.test.GetSpringContext" />
	<!-- bean 后处理器 -->
	<bean id="myProcessor" class="com.spring.test.MyBeanPostProcessor" />
	<bean id="gridData" class="com.action.GridData"/>
	<bean id="authorityAop" class="com.spring.test.AuthorityAspectJ"></bean>
	
	<!-- AOP xml 配置-->
	<aop:config>
		<aop:aspect id="authority" ref="authorityAop" order="2">
			<aop:pointcut expression="execution(* com.action.*.json(..))" id="pointcut1"/>
			<aop:before method="beforeMethod" pointcut="execution(* com.action.*.json())"/>
			<aop:after method="afterMethod" pointcut="execution(* com.action.*.json())"/>
			<aop:after-returning method="afterReturnMethod" pointcut="execution(* com.action.*.json())" returning="rt"/>
			<aop:after-throwing method="afterThrowingMethod" pointcut="execution(* com.action.*.json(..))" throwing="ex"/>
			<aop:around method="aroundMethod" pointcut-ref="pointcut1"/>
		</aop:aspect>
	</aop:config> 
</beans>
